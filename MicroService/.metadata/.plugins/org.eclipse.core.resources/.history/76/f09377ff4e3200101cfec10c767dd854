package com.example.Services;

import org.springframework.stereotype.Service;

import com.example.ReactiveMicroService.Entities.Todo;
import com.example.Repositories.TodoRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class TodoService {

    private final TodoRepository repository;

    public TodoService(TodoRepository repository) {
        this.repository = repository;
    }

    public Flux<Todo> getAllTodos() {
        return repository.findAll();
    }

    public Mono<Todo> getTodoById(Long id) {
        return repository.findById(id);
    }

    public Mono<Todo> createTodo(Todo todo) {
        return repository.save(todo);
    }

    public Mono<Todo> updateTodo(Long id, Todo updated) {
        return repository.findById(id)
            .flatMap(existing -> {
                existing.setTitle(updated.getTitle());
                existing.setDescription(updated.getDescription());
                existing.setCompleted(updated.isCompleted());
                return repository.save(existing);
            });
    }

    public Mono<Void> deleteTodo(Long id) {
        return repository.deleteById(id);
    }
}

